---
- hosts: localhost
  vars:
    remote_user: root
    rancher_server: 127.0.0.1
    rancher_port: 8080
    rancher_agent_version: v1.0.2
    rancher_api_access_key: foo
    rancher_api_access_secret: bar

  tasks:

  - name: Gather facts
    action: ec2_facts
  
  - name: setup disk alarm
    ec2_metric_alarm:
      state: present
      region: "{{ ansible_ec2_placement_region }}"
      name: "disk-alarm-{{ ansible_ec2_instance_id }}"
      metric: "DiskSpaceUtilization"
      namespace: "System/Linux"
      statistic: Average
      comparison: ">="
      threshold: "90.0"
      period: 300
      evaluation_periods: 3
      unit: "Percent"
      description: "When disk usage is greater than 80% for instance {{ ansible_ec2_instance_id }}"
      dimensions: {'Filesystem':'/dev/xvda1','InstanceId':'{{ ansible_ec2_instance_id }}','MountPath':'/'}
      alarm_actions: ["{{ sns_alarm_action }}"]
    environment:
      EC2_SECRET_KEY: "{{ cloudwatch_aws_secret_key }}"
      EC2_ACCESS_KEY: "{{ cloudwatch_aws_access_key_id }}"
      AWS_REGION: "{{ ansible_ec2_placement_region }}"

  - name: setup memory alarm
    ec2_metric_alarm:
      state: present
      region: "{{ ansible_ec2_placement_region }}"
      name: "memory-alarm-{{ ansible_ec2_instance_id }}"
      metric: "MemoryUtilization"
      namespace: "System/Linux"
      statistic: Average
      comparison: ">="
      threshold: "95.0"
      period: 300
      evaluation_periods: 3
      unit: "Percent"
      description: "When memory usage is greater than 95% for instance {{ ansible_ec2_instance_id }}"
      dimensions: {'InstanceId':'{{ ansible_ec2_instance_id }}'}
      alarm_actions: ["{{ sns_alarm_action }}"]
    environment:
      EC2_SECRET_KEY: "{{ cloudwatch_aws_secret_key }}"
      EC2_ACCESS_KEY: "{{ cloudwatch_aws_access_key_id }}"
      AWS_REGION: "{{ ansible_ec2_placement_region }}"
  
  - name: setup cpu alarm
    ec2_metric_alarm:
      state: present
      region: "{{ ansible_ec2_placement_region }}"
      name: "cpu-alarm-{{ ansible_ec2_instance_id }}"
      metric: "CPUUtilization"
      namespace: "AWS/EC2"
      statistic: Average
      comparison: ">="
      threshold: "95.0"
      period: 300
      evaluation_periods: 3
      unit: "Percent"
      description: "When cpu usage is greater than 95% for instance {{ ansible_ec2_instance_id }}"
      dimensions: {'InstanceId':'{{ ansible_ec2_instance_id }}'}
      alarm_actions: ["{{ sns_alarm_action }}"]
    environment:
      EC2_SECRET_KEY: "{{ cloudwatch_aws_secret_key }}"
      EC2_ACCESS_KEY: "{{ cloudwatch_aws_access_key_id }}"
      AWS_REGION: "{{ ansible_ec2_placement_region }}"

  # Registration with Rancher server
  - name: Get the default project id
    action: uri
      method=GET
      status_code=200
      url="http://{{ rancher_server }}:{{ rancher_port }}/v1/projects" return_content=yes
      user="{{ rancher_api_access_key }}"
      password="{{ rancher_api_access_secret }}"
    register: project_id

  - name: Return the registration token URL of Rancher server
    action: uri
      method=POST
      status_code=201
      url="http://{{ rancher_server }}:{{ rancher_port }}/v1/registrationtokens?projectId={{ project_id.json['data'][0]['id'] }}" return_content=yes
      user="{{ rancher_api_access_key }}"
      password="{{ rancher_api_access_secret }}"
    register: rancher_token_url

  - name: Return the registration URL of Rancher server
    action: uri
      method=GET
      url={{ rancher_token_url.json['links']['self'] }} return_content=yes
      user="{{ rancher_api_access_key }}"
      password="{{ rancher_api_access_secret }}"
    register: rancher_token

  - name: Check if the rancher-agent is running
    command: docker ps -a
    register: containers

  - name: Register the Host machine with the Rancher server
    docker:
      image: rancher/agent:{{ rancher_agent_version }}
      privileged: yes
      detach: True
      volumes: /var/run/docker.sock:/var/run/docker.sock
      command: "{{ rancher_token.json['registrationUrl'] }}"
      env:
        CATTLE_HOST_LABELS: "aws.instance_id={{ ansible_ec2_instance_id }}&aws.availability_zone={{ ansible_ec2_placement_availability_zone }}&node_status=current"
      state: started
    when: "{{ 'rancher-agent' not in containers.stdout }}"
